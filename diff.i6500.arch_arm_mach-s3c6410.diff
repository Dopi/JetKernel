diff -rbu /home/martin/Desktop/arm/mach-s3c6410/board-rfkill.c arch/arm/mach-s3c6410/board-rfkill.c
--- /home/martin/Desktop/arm/mach-s3c6410/board-rfkill.c	2009-12-25 16:56:22.000000000 +0100
+++ arch/arm/mach-s3c6410/board-rfkill.c	2010-09-11 12:24:51.000000000 +0200
@@ -13,7 +13,7 @@
  *
  */
 
-/* Control bluetooth power for saturn platform */
+/* Control bluetooth power for instinctq/jet platform */
 
 #include <linux/platform_device.h>
 #include <linux/module.h>
@@ -22,7 +22,6 @@
 #include <linux/delay.h>
 #include <asm/gpio.h>
 #include <mach/gpio.h>
-#include <mach/saturn.h>	/*Updated by kumar.gvs 22 Apr 2009*/
 #include <plat/gpio-cfg.h>
 #include <plat/egpio.h>
 #include <linux/wakelock.h>
@@ -37,6 +36,10 @@
 
 #define IRQ_BT_HOST_WAKE      IRQ_EINT(22)
 
+#ifdef CONFIG_JET_OPTION
+#define GPIO_BT_WLAN_REG_ON 	GPIO_WLAN_BT_SHUTDOWN
+#endif
+
 static struct wake_lock rfkill_wake_lock;
 static struct wake_lock bt_wake_lock;
 
@@ -50,7 +53,7 @@
 
 static int bluetooth_set_power(void *data, enum rfkill_state state)
 {
-	int ret = 0; 
+	unsigned int ret = 0; 
 	switch (state) {
 		
 	case RFKILL_STATE_UNBLOCKED:
@@ -87,7 +90,7 @@
 		
 		printk("[BT] GPIO_BT_WLAN_REG_ON = %d\n", gpio_get_value(GPIO_BT_WLAN_REG_ON));		
 
-		msleep(150);  // 100msec, delay  between reg_on & rst. (bcm4325 powerup sequence)
+			mdelay(150);  // 100msec, delay  between reg_on & rst. (bcm4325 powerup sequence)
 		
 		/* Set GPIO_BT_RST_N high */
 		s3c_gpio_setpull(GPIO_BT_RST_N, S3C_GPIO_PULL_NONE);
@@ -148,7 +151,7 @@
 /*
 	if(gpio_val == GPIO_LEVEL_LOW)
 	{
-		//wake_unlock^M
+		//wake_unlock
 		printk("[BT]:wake_unlock \n");
 		wake_unlock(&rfkill_wake_lock);	
 	}
@@ -179,13 +182,66 @@
 	return IRQ_HANDLED;
 }
 
+#if defined(CONFIG_MACH_INSTINCTQ)
+static int __init instinctq_rfkill_probe(struct platform_device *pdev)
+{
+	int rc = 0;
+	int irq,ret;
+
+	//Initialize wake lockes
+	wake_lock_init(&rfkill_wake_lock, WAKE_LOCK_SUSPEND, "board-rfkill");
+	wake_lock_init(&bt_wake_lock, WAKE_LOCK_SUSPEND, "bt-rfkill");
+
+	//BT Host Wake IRQ
+	irq = IRQ_BT_HOST_WAKE;
+
+	ret = request_irq(irq, bt_host_wake_irq_handler, 0, "bt_host_wake_irq_handler", NULL);
+	if(ret < 0)
+		printk("[BT] Request_irq failed \n");
+
+	set_irq_type(irq, IRQ_TYPE_EDGE_BOTH);
+	enable_irq(IRQ_EINT(22));
+
+	//RFKILL init - default to bluetooth off */
+	rfkill_switch_all(RFKILL_TYPE_BLUETOOTH, RFKILL_STATE_SOFT_BLOCKED);
+
+	bt_rfk = rfkill_allocate(&pdev->dev, RFKILL_TYPE_BLUETOOTH);
+	if (!bt_rfk)
+		return -ENOMEM;
+
+	bt_rfk->name = bt_name;
+	bt_rfk->state = RFKILL_STATE_SOFT_BLOCKED;
+	/* userspace cannot take exclusive control */
+	bt_rfk->user_claim_unsupported = 1;
+	bt_rfk->user_claim = 0;
+	bt_rfk->data = NULL;  // user data
+	bt_rfk->toggle_radio = bluetooth_set_power;
+
+	printk("[BT] rfkill_register(bt_rfk) \n");
+	rc = rfkill_register(bt_rfk);
+	if (rc)
+		rfkill_free(bt_rfk);
+
+	bluetooth_set_power(NULL, RFKILL_STATE_SOFT_BLOCKED);
+
+	return rc;
+}
+
+static struct platform_driver instinctq_device_rfkill = {
+	.probe = instinctq_rfkill_probe,
+	.driver = {
+		.name = "bt_rfkill",
+		.owner = THIS_MODULE,
+	},
+};
 
-static int __init saturn_rfkill_probe(struct platform_device *pdev)
+#else //if defined(CONFIG_MACH_JET)
+static int __init jet_rfkill_probe(struct platform_device *pdev)
 {
 	int rc = 0;
 	int irq,ret;
 
-	//Initialize wake locks
+	//Initialize wake lockes
 	wake_lock_init(&rfkill_wake_lock, WAKE_LOCK_SUSPEND, "board-rfkill");
 	wake_lock_init(&bt_wake_lock, WAKE_LOCK_SUSPEND, "bt-rfkill");
 
@@ -199,7 +255,7 @@
 	set_irq_type(irq, IRQ_TYPE_EDGE_BOTH);
 	enable_irq(IRQ_EINT(22));
 
-	//RFKILL init - default to bluetooth off
+	//RFKILL init - default to bluetooth off */
 	rfkill_switch_all(RFKILL_TYPE_BLUETOOTH, RFKILL_STATE_SOFT_BLOCKED);
 
 	bt_rfk = rfkill_allocate(&pdev->dev, RFKILL_TYPE_BLUETOOTH);
@@ -224,19 +280,20 @@
 	return rc;
 }
 
-static struct platform_driver saturn_device_rfkill = {
-	.probe = saturn_rfkill_probe,
+static struct platform_driver jet_device_rfkill = {
+	.probe = jet_rfkill_probe,
 	.driver = {
 		.name = "bt_rfkill",
 		.owner = THIS_MODULE,
 	},
 };
+#endif
 
 #ifdef BT_SLEEP_ENABLER
 static struct rfkill *bt_sleep;
 
 static int bluetooth_set_sleep(void *data, enum rfkill_state state)
-{	int ret =0;
+{	unsigned int ret =0;
 	switch (state) {
 		
 	case RFKILL_STATE_UNBLOCKED:
@@ -253,6 +310,7 @@
 		s3c_gpio_setpull(GPIO_BT_WAKE, S3C_GPIO_PULL_NONE);
 		gpio_set_value(GPIO_BT_WAKE, GPIO_LEVEL_LOW);
 
+			mdelay(50);  // 50msec, why?
 		printk("[BT] GPIO_BT_WAKE = %d\n", gpio_get_value(GPIO_BT_WAKE) );
 		gpio_free(GPIO_BT_WAKE);
 		//billy's changes
@@ -274,6 +332,7 @@
 		s3c_gpio_setpull(GPIO_BT_WAKE, S3C_GPIO_PULL_NONE);
 		gpio_set_value(GPIO_BT_WAKE, GPIO_LEVEL_HIGH);
 		
+			mdelay(50);
 		printk("[BT] GPIO_BT_WAKE = %d\n", gpio_get_value(GPIO_BT_WAKE) );
 		gpio_free(GPIO_BT_WAKE);
 		//billy's changes
@@ -282,12 +341,13 @@
 		break;
 
 	default:
-			printk(KERN_ERR "[BT] bad bluetooth rfkill state %d\n", state);
+			printk(KERN_ERR "[BT] Bad bluetooth rfkill state %d\n", state);
 	}
 	return 0;
 }
 
-static int __init saturn_btsleep_probe(struct platform_device *pdev)
+#if defined(CONFIG_MACH_INSTINCTQ)
+static int __init instinctq_btsleep_probe(struct platform_device *pdev)
 {
 	int rc = 0;
 
@@ -315,28 +375,90 @@
 	return rc;
 }
 
-static struct platform_driver saturn_device_btsleep = {
-	.probe = saturn_btsleep_probe,
+static struct platform_driver instinctq_device_btsleep = {
+	.probe = instinctq_btsleep_probe,
 	.driver = {
 		.name = "bt_sleep",
 		.owner = THIS_MODULE,
 	},
 };
+
+#else // if defined(CONFIG_MACH_JET)
+
+static int __init jet_btsleep_probe(struct platform_device *pdev)
+{
+	int rc = 0;
+
+	bt_sleep = rfkill_allocate(&pdev->dev, RFKILL_TYPE_BLUETOOTH);
+	if (!bt_sleep)
+		return -ENOMEM;
+
+	bt_sleep->name = bt_name;
+	bt_sleep->state = RFKILL_STATE_UNBLOCKED;
+	/* userspace cannot take exclusive control */
+	bt_sleep->user_claim_unsupported = 1;
+	bt_sleep->user_claim = 0;
+	bt_sleep->data = NULL;  // user data
+	bt_sleep->toggle_radio = bluetooth_set_sleep;
+
+	rc = rfkill_register(bt_sleep);
+	if (rc)
+		rfkill_free(bt_sleep);
+	
+	printk("[BT] rfkill_force_state(bt_sleep, RFKILL_STATE_UNBLOCKED) \n");
+	rfkill_force_state(bt_sleep, RFKILL_STATE_UNBLOCKED);
+	
+	bluetooth_set_sleep(NULL, RFKILL_STATE_UNBLOCKED);
+
+	return rc;
+}
+
+static struct platform_driver jet_device_btsleep = {
+	.probe = jet_btsleep_probe,
+	.driver = {
+		.name = "bt_sleep",
+		.owner = THIS_MODULE,
+	},
+};
+#endif // if defined(CONFIG_MACH_JET)
+
+#endif // #ifdef BT_SLEEP_ENABLER
+
+#if defined(CONFIG_MACH_INSTINCTQ)
+static int __init instinctq_rfkill_init(void)
+{
+	int rc = 0;
+	rc = platform_driver_register(&instinctq_device_rfkill);
+
+#ifdef BT_SLEEP_ENABLER
+	platform_driver_register(&instinctq_device_btsleep);
 #endif
 
-static int __init saturn_rfkill_init(void)
+	return rc;
+}
+#else // if defined(CONFIG_MACH_JET)
+static int __init jet_rfkill_init(void)
 {
 	int rc = 0;
-	rc = platform_driver_register(&saturn_device_rfkill);
+	rc = platform_driver_register(&jet_device_rfkill);
 
 #ifdef BT_SLEEP_ENABLER
-	platform_driver_register(&saturn_device_btsleep);
+	platform_driver_register(&jet_device_btsleep);
 #endif
 
 	return rc;
 }
+#endif // if defined(CONFIG_MACH_JET)
 
-module_init(saturn_rfkill_init);
-MODULE_DESCRIPTION("saturn rfkill");
+#if defined(CONFIG_MACH_INSTINCTQ)
+module_init(instinctq_rfkill_init);
+MODULE_DESCRIPTION("instinctq rfkill");
 MODULE_AUTHOR("Nick Pelly <npelly@google.com>");
 MODULE_LICENSE("GPL");
+#else // if defined(CONFIG_MACH_JET)
+module_init(jet_rfkill_init);
+MODULE_DESCRIPTION("jet rfkill");
+MODULE_AUTHOR("Nick Pelly <npelly@google.com>");
+MODULE_LICENSE("GPL");
+#endif // if defined(CONFIG_MACH_JET)
+
Only in arch/arm/mach-s3c6410: board-rfkill.o
Only in arch/arm/mach-s3c6410: .board-rfkill.o.cmd
Only in arch/arm/mach-s3c6410: built-in.o
Only in arch/arm/mach-s3c6410: .built-in.o.cmd
diff -rbu /home/martin/Desktop/arm/mach-s3c6410/cpu.c arch/arm/mach-s3c6410/cpu.c
--- /home/martin/Desktop/arm/mach-s3c6410/cpu.c	2009-12-25 16:56:22.000000000 +0100
+++ arch/arm/mach-s3c6410/cpu.c	2010-07-20 00:49:15.000000000 +0200
@@ -84,11 +84,19 @@
 
 	s3c6410_default_sdhci0();
 
-#if defined(CONFIG_MACH_SATURN)
+#ifdef CONFIG_MACH_CAPELA
+	s3c6410_default_sdhci1(); // yoohyuk 2009-03-10 Enable SDHC1
+#endif
+
+#if defined(CONFIG_MACH_INSTINCTQ)
+	s3c6410_default_sdhci2();
+#endif
+
+#if defined(CONFIG_MACH_JET)
 	s3c6410_default_sdhci2();
 #endif
 
-	/* the i2c devices are directly compatible with s3c */
+	/* the i2c devices are directly compatible with s3c2440 */
 	s3c_i2c0_setname("s3c-i2c");
 	s3c_i2c1_setname("s3c-i2c");
 
Only in arch/arm/mach-s3c6410: cpu.o
Only in arch/arm/mach-s3c6410: .cpu.o.cmd
Only in arch/arm/mach-s3c6410: irq.o
Only in arch/arm/mach-s3c6410: .irq.o.cmd
diff -rbu /home/martin/Desktop/arm/mach-s3c6410/Kconfig arch/arm/mach-s3c6410/Kconfig
--- /home/martin/Desktop/arm/mach-s3c6410/Kconfig	2009-12-25 16:56:22.000000000 +0100
+++ arch/arm/mach-s3c6410/Kconfig	2010-09-22 23:11:51.000000000 +0200
@@ -1,5 +1,6 @@
 # arch/arm/mach-s3c6410/Kconfig
 #
+# Copyright 2010 JetDroid project
 # Copyright 2008 Openmoko, Inc.
 # Copyright 2008 Simtec Electronics
 #
@@ -36,18 +37,34 @@
 	help
 	  Machine support for the Samsung SMDK6410
 
-config MACH_SATURN
-	bool "SATURN"
+config MACH_INSTINCTQ
+	bool "INSTINCTQ"
 	select CPU_S3C6410
 	select S3C_DEV_HSMMC
+#	select S3C_DEV_HSMMC1
 	select S3C_DEV_HSMMC2
-	select S3C_DEV_I2C1
+	select S3C_DEV_I2C0
+#	select S3C_DEV_I2C1
 	select S3C6410_SETUP_SDHCI
-	select S3C64XX_SETUP_I2C1
-	select S3C64XX_ADCTS
+	select S3C64XX_SETUP_I2C0
+#	select S3C64XX_SETUP_I2C1
+#	select S3C_DMA_PL080_NEW
+	help
+	  Machine support for the Samsung INSTINCTQ
+
+config MACH_JET
+	bool "JET"
+	select CPU_S3C6410
+	select S3C_DEV_HSMMC
+	select S3C_DEV_HSMMC1
+	select S3C_DEV_HSMMC2
+#	select S3C_DEV_I2C1
+	select S3C6410_SETUP_SDHCI
+	select S3C64XX_SETUP_I2C0
+#	select S3C64XX_SETUP_I2C1
 #	select S3C_DMA_PL080_NEW
 	help
-	  Machine support for the Samsung SATURN
+	  Machine support for the Samsung JET (GT-S8000)
 
 endchoice
 
@@ -92,7 +109,7 @@
 
 config BOARD_REVISION
 	hex "Select H/W Revision"
-	depends on MACH_SATURN
+	depends on MACH_INSTINCTQ || MACH_JET
 	default "0x00"
 
 config SEC_HEADSET
@@ -108,4 +125,9 @@
 	help
 	  Provides support for SEC log buffer shared with Loke bootloader.
 
+config JET_OPTION
+	bool "Adjustments for S8000 Jet"
+	default n
+	help
+	  Provides support for S8000 Jet.
 endmenu
Only in arch/arm/mach-s3c6410: mach-instinctq.c
Only in arch/arm/mach-s3c6410: mach-jet.c
Only in arch/arm/mach-s3c6410: mach-jet.o
Only in arch/arm/mach-s3c6410: .mach-jet.o.cmd
Only in arch/arm/mach-s3c6410: mach-spica.c
diff -rbu /home/martin/Desktop/arm/mach-s3c6410/Makefile arch/arm/mach-s3c6410/Makefile
--- /home/martin/Desktop/arm/mach-s3c6410/Makefile	2009-12-25 16:56:22.000000000 +0100
+++ arch/arm/mach-s3c6410/Makefile	2010-07-20 00:49:15.000000000 +0200
@@ -1,5 +1,6 @@
 # arch/arm/plat-s3c6410/Makefile
 #
+# Copyright 2010 JetDroid Project
 # Copyright 2008 Openmoko, Inc.
 # Copyright 2008 Simtec Electronics
 #
@@ -19,11 +20,12 @@
 # Helper and device support
 
 obj-$(CONFIG_S3C6410_SETUP_SDHCI)	+= setup-sdhci.o
-
 obj-$(CONFIG_PM)    += pm.o
 
-# Machine support
+# machine support
 
 obj-$(CONFIG_MACH_SMDK6410)		+= mach-smdk6410.o
-obj-$(CONFIG_MACH_SATURN)	+= mach-saturn.o board-rfkill.o
+#obj-$(CONFIG_MACH_INSTINCTQ)	+= mach-instinctq.o board-rfkill.o
+obj-$(CONFIG_MACH_INSTINCTQ)	+= mach-jet.o board-rfkill.o
+obj-$(CONFIG_MACH_JET)		+= mach-jet.o board-rfkill.o
 obj-$(CONFIG_SEC_HEADSET)	+= sec_headset.o
Only in arch/arm/mach-s3c6410: modules.order
Only in arch/arm/mach-s3c6410: pm.o
Only in arch/arm/mach-s3c6410: .pm.o.cmd
diff -rbu /home/martin/Desktop/arm/mach-s3c6410/sec_headset.c arch/arm/mach-s3c6410/sec_headset.c
--- /home/martin/Desktop/arm/mach-s3c6410/sec_headset.c	2010-02-08 22:33:24.000000000 +0100
+++ arch/arm/mach-s3c6410/sec_headset.c	2010-07-20 00:49:15.000000000 +0200
@@ -36,35 +36,30 @@
 #include <asm/mach-types.h>
 #include <mach/sec_headset.h>
 
-extern int call_state;
-
-// #define CONFIG_DEBUG_SEC_HEADSET
+#define CONFIG_DEBUG_SEC_HEADSET
 
 #ifdef CONFIG_DEBUG_SEC_HEADSET
-#define SEC_HEADSET_DBG(fmt, arg...) printk(KERN_INFO "[HEADSET] " fmt "\r\n", ## arg)
+#define SEC_HEADSET_DBG(fmt, arg...) printk(KERN_INFO "[SEC_HEADSET] %s " fmt "\r\n", __func__, ## arg)
 #else
-#define SEC_HEADSET_DBG(fmt, arg...) 
+#define SEC_HEADSET_DBG(fmt, arg...) do {} while (0)
 #endif
 
 #define KEYCODE_SENDEND 248
 
-#define HEADSET_CHECK_COUNT	3
-#define	HEADSET_CHECK_TIME	get_jiffies_64() + (HZ/5)// 1000ms / 10 = 100ms
-#define	SEND_END_ENABLE_TIME 	get_jiffies_64() + (HZ*2)// 1000ms * 2 = 2sec
-
-#define SEND_END_CHECK_COUNT	3
-#define SEND_END_CHECK_TIME get_jiffies_64() + 6 //30ms
-#define SEND_END_CHECK_TIME_INCALL get_jiffies_64() + (HZ/6) // 1000ms /6 = 167ms
-//#define SEND_END_CHECK_TIME get_jiffies_64() + (HZ/50) //1000ms / 50 = 20ms
-//#define SEND_END_CHECK_TIME get_jiffies_64() + (HZ/100) //1000ms / 100 = 10ms 
+//#define USING_ADC_FOR_EAR_DETECTING
+
+/* for short key time limit */
+static u64 pressed_jiffies;
+static u64 irq_jiffies;
+#define SHORTKEY_MS			120
+#define SHORTKEY_JIFFIES	((HZ / 10) * (SHORTKEY_MS / 100)) + (HZ / 100) * ((SHORTKEY_MS % 100) / 10)
 
 extern int s3c_adc_get_adc_data(int channel);
+extern int mic_ear_enable(int);
 
 struct sec_headset_info {
 	struct sec_headset_port port;
 	struct input_dev *input;
-	
-	atomic_t btn_state;
 };
 
 static struct sec_headset_info *hi;
@@ -78,13 +73,9 @@
         .name = "send_end",
 };
 
-static struct timer_list headset_detect_timer;
-static struct timer_list send_end_key_event_timer;
-
-static unsigned int headset_detect_timer_token;
-static unsigned int send_end_key_timer_token;
-static unsigned int send_end_irq_token;
-static unsigned short int headset_status;
+static struct timer_list send_end_enable_timer;
+static unsigned int send_end_irq_token = 0;
+static unsigned short int headset_status = 0;
 static struct wake_lock headset_sendend_wake_lock;
 
 short int get_headset_status()
@@ -92,98 +83,73 @@
 	SEC_HEADSET_DBG(" headset_status %d", headset_status);
 	return headset_status;
 }
-
 EXPORT_SYMBOL(get_headset_status);
-static void release_headset_event(unsigned long arg)
+
+static void send_end_enable_timer_handler(unsigned long arg)
 {
-	printk("Headset attached\n");
-	headset_status = 1;
-	switch_set_state(&switch_earjack, 1);
+	struct sec_gpio_info   *send_end = &hi->port.send_end;
+	enable_irq (send_end->eint);
+	send_end_irq_token++;
+	wake_unlock(&headset_sendend_wake_lock);
+	SEC_HEADSET_DBG("enable send_end event, token is %d", send_end_irq_token);
 }
-static DECLARE_DELAYED_WORK(release_headset_event_work, release_headset_event);
+static void send_end_press_work_handler(struct work_struct *ignored)
+{
+	SEC_HEADSET_DBG("SEND/END Button is pressed");
+	printk(KERN_ERR "SISO:sendend isr work queue\n");
 
+	switch_set_state(&switch_sendend, 1);
+	input_report_key(hi->input, KEYCODE_SENDEND, 1);
+	input_sync(hi->input);
+}
+static void send_end_release_work_handler(struct work_struct *ignored)
+{
+	switch_set_state(&switch_sendend, 0);
+	input_report_key(hi->input, KEYCODE_SENDEND, 0);
+	input_sync(hi->input);
+
+	SEC_HEADSET_DBG("SEND/END Button is %s.\n", "released");
+}
+#ifdef USING_ADC_FOR_EAR_DETECTING
 static void ear_adc_caculrator(unsigned long arg)
 {
 	int adc = 0;
 	struct sec_gpio_info   *det_headset = &hi->port.det_headset;
-	struct sec_gpio_info   *send_end = &hi->port.send_end;
 	int state = gpio_get_value(det_headset->gpio) ^ det_headset->low_active;
 	
 	if (state)
 	{
-		gpio_set_value(GPIO_MICBIAS_EN, 1); 
-		SEC_HEADSET_DBG("MICBIAS enable before adc check  \n");
-		msleep(200); 
-		adc = s3c_adc_get_adc_data(3);
-		SEC_HEADSET_DBG("MICBIAS disable after adc check  \n");
-		gpio_set_value(GPIO_MICBIAS_EN, 0); 
-             
-		if((adc > 1700 && adc < 3400) /*|| (adc > 2400 && adc < 2700) || (adc > 2800 && adc < 3400) */ || (adc > 200 && adc < 700))
+		adc = s3c_adc_get_adc_data(3);//headset adc port is 3
+		if(adc < 3155 && adc > 3140)
 		{
-			printk("4pole ear-mic adc is %d\n", adc);
-			enable_irq (send_end->eint);
-			send_end_irq_token++;
-			SEC_HEADSET_DBG("MICBIAS enable after token is %d \n", send_end_irq_token);
-			gpio_set_value(GPIO_MICBIAS_EN, 1); 
+			SEC_HEADSET_DBG("4pole ear-mic attached adc is %d, send_end interrupt enable 2sec after", adc);
+        		switch_set_state(&switch_earjack, state);
+			send_end_enable_timer.expires = get_jiffies_64() + (20*HZ/10);//2sec HZ is 200
+			add_timer(&send_end_enable_timer);
 		}
-		else if(adc < 10)
+		//else if(adc < 50 && adc > 10) //TV Out
+		else if(adc < 5)
 		{
-			printk("3pole earphone adc is %d\n", adc);
-			headset_status = 0;
+			SEC_HEADSET_DBG("3pole earphone attached adc is %d", adc);
+        		switch_set_state(&switch_earjack, state);
 		}
 		else
 		{
-			printk(KERN_ALERT "Wrong adc value!! adc is %d\n", adc);
-			headset_status = 0;
+			SEC_HEADSET_DBG("Wrong adc value adc is %d", adc);
+        		switch_set_state(&switch_earjack, state);
 		}
+
 	}
 	else
 	{
-		printk(KERN_ALERT "Error : mic bias enable complete but headset detached!!\n");
-		gpio_set_value(GPIO_MICBIAS_EN, 0);
+		SEC_HEADSET_DBG("Error : mic bias enable complete but headset detached!!");
 	}
-
-	wake_unlock(&headset_sendend_wake_lock);
 }
+#endif
 
+#ifdef USING_ADC_FOR_EAR_DETECTING
 static DECLARE_DELAYED_WORK(ear_adc_cal_work, ear_adc_caculrator);
-
-static void headset_detect_timer_handler(unsigned long arg)
-{
-	struct sec_gpio_info   *det_headset = &hi->port.det_headset;
-	int state;
-	state = gpio_get_value(det_headset->gpio) ^ det_headset->low_active;
-
-	if(state)
-	{
-		SEC_HEADSET_DBG("headset_detect_timer_token is %d\n", headset_detect_timer_token);
-		if(headset_detect_timer_token < 3)
-		{
-			headset_detect_timer.expires = HEADSET_CHECK_TIME;
-			add_timer(&headset_detect_timer);
-			headset_detect_timer_token++;
-		}
-		else if(headset_detect_timer_token == 3)
-		{
-			headset_detect_timer.expires = SEND_END_ENABLE_TIME;
-			add_timer(&headset_detect_timer);
-			headset_detect_timer_token++;
-			schedule_work(&release_headset_event_work);
-		}
-		else if(headset_detect_timer_token == 4)
-		{
-			//gpio_set_value(GPIO_MICBIAS_EN, 1); 
-			//schedule_delayed_work(&ear_adc_cal_work, 200);
-			schedule_work(&ear_adc_cal_work);
-			SEC_HEADSET_DBG("mic bias enable add work queue \n");
-			headset_detect_timer_token = 0;
-		}
-		else
-			printk(KERN_ALERT "wrong headset_detect_timer_token count %d", headset_detect_timer_token);
-	}
-	else
-		printk(KERN_ALERT "headset detach!! %d", headset_detect_timer_token);
-}
+#endif
 
 static void ear_switch_change(struct work_struct *ignored)
 {
@@ -191,87 +157,51 @@
 	struct sec_gpio_info   *send_end = &hi->port.send_end;
 	int state;
 
-	del_timer(&headset_detect_timer);
+	del_timer(&send_end_enable_timer);
+#ifdef USING_ADC_FOR_EAR_DETECTING
 	cancel_delayed_work_sync(&ear_adc_cal_work);
+#endif
 	state = gpio_get_value(det_headset->gpio) ^ det_headset->low_active;
 
 	if (state && !send_end_irq_token)
 	{		
+#ifdef USING_ADC_FOR_EAR_DETECTING
+		SEC_HEADSET_DBG("Headset attached, mic bias enable");
+		gpio_set_value(GPIO_MICBIAS_EN, 1);
+		schedule_delayed_work(&ear_adc_cal_work, 150);
+#else
+		SEC_HEADSET_DBG("Headset attached, send end enable 2sec after");
+        mic_ear_enable(1);
+        	switch_set_state(&switch_earjack, state);
+		headset_status = state;
+		send_end_enable_timer.expires = get_jiffies_64() + (20*HZ/10);//2sec HZ is 200
+		add_timer(&send_end_enable_timer);
 		wake_lock(&headset_sendend_wake_lock);
-		SEC_HEADSET_DBG("Headset attached timer start\n");
-		headset_detect_timer_token = 0;
-		headset_detect_timer.expires = HEADSET_CHECK_TIME;
-		add_timer(&headset_detect_timer);
+#endif
 	}
 	else if(!state)
 	{
+		SEC_HEADSET_DBG("Headset detached %d ", send_end_irq_token);
+#ifdef USING_ADC_FOR_EAR_DETECTING
+		gpio_set_value(GPIO_MICBIAS_EN, 0);
+#endif
+        mic_ear_enable(0);
+		wake_unlock(&headset_sendend_wake_lock);
         	switch_set_state(&switch_earjack, state);
-		printk("Headset detached %d \n", send_end_irq_token);        	
 		headset_status = state;
-
-		if( atomic_read(&hi->btn_state) ){
-			atomic_set(&hi->btn_state,0);
-			input_report_key(hi->input, KEYCODE_SENDEND, 0);
-			input_sync(hi->input);
-		}
-			
 		if(send_end_irq_token > 0)
 		{
-			/* Only for Saturn
-			 * To reduce pop-up noise, disable micbias when disconnecting earpiece 
-			 * But, if phone is in incall state, must re-enable micbias immediately  
-			 * because of mic mute problem 
-			 */
-			 /* Eclair Version Only 
-			 ** In Eclair Version, do not diable micbias
-			 */
-			 SEC_HEADSET_DBG("call_state = %d when disconnecting earphone\n",call_state); 
-			 if( !call_state )
-			 {
-			 	SEC_HEADSET_DBG("MICBIAS disable when earphone disconnected \n"); 
-			    gpio_set_value(GPIO_MICBIAS_EN, 0); 
-			 }
 			disable_irq (send_end->eint);
 			send_end_irq_token--;
 		}
-		//wake_unlock(&headset_sendend_wake_lock);
-		wake_lock_timeout(&headset_sendend_wake_lock, HZ*3 );
 	}
 	else
 		SEC_HEADSET_DBG("Headset state does not valid. or send_end event");
 
 }
-static void send_end_key_event_timer_handler(unsigned long arg)
-{
-	struct sec_gpio_info   *det_headset = &hi->port.det_headset;
-	struct sec_gpio_info   *send_end = &hi->port.send_end;
-	int sendend_state, headset_state = 0;
-	
-	headset_state = gpio_get_value(det_headset->gpio) ^ det_headset->low_active;
-	sendend_state = gpio_get_value(send_end->gpio) ^ send_end->low_active;
 
-	if(headset_state && sendend_state)
-	{
-		if(send_end_key_timer_token < SEND_END_CHECK_COUNT)
-		{	
-			send_end_key_timer_token++;
-			send_end_key_event_timer.expires = call_state?SEND_END_CHECK_TIME_INCALL:SEND_END_CHECK_TIME; 
-			add_timer(&send_end_key_event_timer);
-			SEC_HEADSET_DBG("SendEnd Timer Restart %d (call_state = %d)", send_end_key_timer_token,call_state);
-		}
-		else if(send_end_key_timer_token == SEND_END_CHECK_COUNT)
-		{
-			printk("SEND/END is pressed\n");
-			atomic_set(&hi->btn_state,1);
-			input_report_key(hi->input, KEYCODE_SENDEND, 1);
-			input_sync(hi->input);
-			send_end_key_timer_token = 0;
-		}
-		else
-			printk(KERN_ALERT "[Headset]wrong timer counter %d\n", send_end_key_timer_token);
-	}else
-			printk(KERN_ALERT "[Headset]GPIO Error\n");
-}
+static DECLARE_DELAYED_WORK(sendend_press_work, send_end_press_work_handler);
+static DECLARE_DELAYED_WORK(sendend_release_work, send_end_release_work_handler);
 
 static void sendend_switch_change(struct work_struct *ignored)
 {
@@ -280,10 +210,6 @@
 	struct sec_gpio_info   *send_end = &hi->port.send_end;
 	int state, headset_state;
 
-	del_timer(&send_end_key_event_timer);
-	send_end_key_timer_token = 0;
-    mdelay(10); // for earjack keyevent delay
-	
 	headset_state = gpio_get_value(det_headset->gpio) ^ det_headset->low_active;
 	state = gpio_get_value(send_end->gpio) ^ send_end->low_active;
 
@@ -291,21 +217,16 @@
 	{
 		if(!state)
 		{
-			SEC_HEADSET_DBG(KERN_ERR "SISO:sendend isr work queue\n");
-    			switch_set_state(&switch_sendend, state);
-			atomic_set(&hi->btn_state,0);
-			input_report_key(hi->input, KEYCODE_SENDEND, state);
-			input_sync(hi->input);
-			printk("SEND/END %s.\n", "released");
+			printk(KERN_ERR "SISO:sendend isr work queue\n");
 			wake_unlock(&headset_sendend_wake_lock);
+			/* if keep pressed event for short key, reconize release event */
+			schedule_delayed_work(&sendend_release_work, SHORTKEY_MS); 	
 		}else{
+			/* if keep pressed event for short key, reconize press event */
+			schedule_delayed_work(&sendend_press_work, SHORTKEY_MS); 	
 			wake_lock(&headset_sendend_wake_lock);
-			send_end_key_event_timer.expires = call_state ? SEND_END_CHECK_TIME_INCALL : SEND_END_CHECK_TIME; // 10ms ??
-			add_timer(&send_end_key_event_timer);
-			switch_set_state(&switch_sendend, state);
-			SEC_HEADSET_DBG("SEND/END %s.timer start \n", "pressed");
+			SEC_HEADSET_DBG("SEND/END Button is %s. timer start\n", "pressed");
 		}
-
 	}else{
 		SEC_HEADSET_DBG("SEND/END Button is %s but headset disconnect or irq disable.\n", state?"pressed":"released");
 	}
@@ -316,23 +237,31 @@
 
 static irqreturn_t detect_irq_handler(int irq, void *dev_id)
 {
-	SEC_HEADSET_DBG("headset isr");
 	schedule_work(&ear_switch_work);
 	return IRQ_HANDLED;
 }
  
-
 static irqreturn_t send_end_irq_handler(int irq, void *dev_id)
 {
-   struct sec_gpio_info   *det_headset = &hi->port.det_headset;
-   int headset_state;
+	struct sec_gpio_info   *send_end = &hi->port.send_end;
    
-   SEC_HEADSET_DBG("sendend isr");
-   del_timer(&send_end_key_event_timer);
-   headset_state = gpio_get_value(det_headset->gpio) ^ det_headset->low_active;
+	irq_jiffies = jiffies_64;
 
-   if (headset_state)
+	/* Pressed */
+	if (gpio_get_value(send_end->gpio) ^ send_end->low_active)
+	{
+		pressed_jiffies = irq_jiffies;
+		schedule_work(&sendend_switch_work);
+	}
+	/* Released */
+	else
    {
+		/* ignore shortkey */
+		if (irq_jiffies - pressed_jiffies < SHORTKEY_JIFFIES) {
+			cancel_delayed_work_sync(&sendend_press_work);
+			SEC_HEADSET_DBG("Cancel press work queue");
+		}	
+		else
       schedule_work(&sendend_switch_work);      
    }
   
@@ -352,8 +281,6 @@
 	if (!hi)
 		return -ENOMEM;
 
-	atomic_set(&hi->btn_state,0);
-
 	memcpy (&hi->port, pdata->port, sizeof(struct sec_headset_port));
 
 	input = hi->input = input_allocate_device();
@@ -374,11 +301,8 @@
 		goto err_register_input_dev;
 	}
 	
-	init_timer(&headset_detect_timer);
-	headset_detect_timer.function = headset_detect_timer_handler;
-
-	init_timer(&send_end_key_event_timer);
-	send_end_key_event_timer.function = send_end_key_event_timer_handler;
+	init_timer(&send_end_enable_timer);
+	send_end_enable_timer.function = send_end_enable_timer_handler;
 
 	ret = switch_dev_register(&switch_earjack);
 	if (ret < 0) {
diff -rbu /home/martin/Desktop/arm/mach-s3c6410/setup-sdhci.c arch/arm/mach-s3c6410/setup-sdhci.c
--- /home/martin/Desktop/arm/mach-s3c6410/setup-sdhci.c	2009-12-25 16:56:22.000000000 +0100
+++ arch/arm/mach-s3c6410/setup-sdhci.c	2010-07-20 00:49:15.000000000 +0200
@@ -55,9 +55,15 @@
 		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
 	}
 
+#ifdef CONFIG_JET_OPTION
+	s3c_gpio_cfgpin(GPIO_T_FLASH_DETECT, S3C_GPIO_SFN(GPIO_T_FLASH_DETECT_AF));
+	gpio_set_value(GPIO_T_FLASH_DETECT, GPIO_LEVEL_HIGH);
+	s3c_gpio_setpull(GPIO_T_FLASH_DETECT, S3C_GPIO_PULL_NONE);
+#else
 	s3c_gpio_cfgpin(GPIO_TF_DETECT, S3C_GPIO_SFN(GPIO_TF_DETECT_AF));
 	gpio_set_value(GPIO_TF_DETECT, GPIO_LEVEL_HIGH);
 	s3c_gpio_setpull(GPIO_TF_DETECT, S3C_GPIO_PULL_NONE);
+#endif
 }
 
 void s3c6410_setup_sdhci1_cfg_gpio(struct platform_device *dev, int width)
@@ -102,7 +108,7 @@
 
 	/* don't need to alter anything acording to card-type */
 
-	writel(S3C64XX_SDHCI_CONTROL4_DRIVE_2mA, r + S3C64XX_SDHCI_CONTROL4);
+	writel(S3C64XX_SDHCI_CONTROL4_DRIVE_4mA, r + S3C64XX_SDHCI_CONTROL4);
 
 	ctrl2 = readl(r + S3C_SDHCI_CONTROL2);
 	ctrl2 &= S3C_SDHCI_CTRL2_SELBASECLK_MASK;
Only in arch/arm/mach-s3c6410: setup-sdhci.o
Only in arch/arm/mach-s3c6410: .setup-sdhci.o.cmd
